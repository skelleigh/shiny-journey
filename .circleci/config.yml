version: 2.1

orbs:
  buildevents: honeycombio/buildevents@0.2.8

jobs:
  
  setup:
    docker:
      - image: circleci/rust
    steps:
      - buildevents/start_trace
  
  watch:
    docker:
      - image: circleci/rust
    steps:
      - buildevents/watch_build_and_finish

  build-and-test:
    docker:
      - image: circleci/rust
    environment:
      # Fail the build if there are warnings
      RUSTFLAGS: '-D warnings'
    steps:
      - buildevents/with_job_span:
          steps:
            - checkout
            - buildevents/berun:
                bename: version_info
                becommand: rustc --version; cargo --version; rustup --version
            - buildevents/berun:
                bename: gen_lockfile
                becommand: cargo generate-lockfile
            - restore_cache:
                keys:
                  - v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
            - buildevents/berun:
                bename: cargo_build
                becommand: cargo build
            - save_cache:
                paths:
                  - /usr/local/cargo/registry
                  - target/debug/.fingerprint
                  - target/debug/build
                  - target/debug/deps
                key: v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
            - buildevents/berun:
                bename: cargo_test
                becommand: cargo test

  security:
    docker:
      - image: circleci/rust
    steps:
      - buildevents/with_job_span:
          steps:
            - checkout
            - buildevents/berun:
                bename: version_info
                becommand: rustc --version; cargo --version; rustup --version
            - buildevents/berun:
                bename: cache_permission
                becommand: sudo chown -R $(whoami):$(id -ng) /usr/local/cargo
            - restore_cache:
                keys:
                  - v1-cargo-audit-{{ arch }}
            - buildevents/berun:
                bename: install_cargo-audit
                becommand: cargo install cargo-audit
            - save_cache:
                paths:
                  - /usr/local/cargo
                key: v1-cargo-audit-{{ arch }}
            - buildevents/berun:
                bename: audit
                becommand: cargo audit

  format:
    docker:
      - image: circleci/rust
    steps:
      - buildevents/with_job_span:
          steps:
            - checkout
            - buildevents/berun:
                bename: version_info
                becommand: rustc --version; cargo --version; rustup --version
            - buildevents/berun:
                bename: install_rustfmt
                becommand: rustup component add rustfmt
            - buildevents/berun:
                bename: format
                becommand: cargo fmt --all -- --check

  lint:
    docker:
      - image: circleci/rust
    steps:
      - buildevents/with_job_span:
          steps:
            - checkout
            - buildevents/berun:
                bename: version_info
                becommand: rustc --version; cargo --version; rustup --version
            - buildevents/berun:
                bename: install_clippy
                becommand: rustup component add clippy
            - buildevents/berun:
                bename: lint
                becommand: cargo clippy -- -D warnings

  coverage:
    machine: true
    steps:
      - checkout
      - run:
          name: Coverage with docker
          command: docker run --security-opt seccomp=unconfined -v "${PWD}:/volume" xd009642/tarpaulin cargo tarpaulin --ignore-tests

workflows:
  version: 2
  build-test:
    jobs:
      - setup:
        filters:
          tags:
            only: /.*/
      - watch:
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /pull\/.*/
      - build-and-test:
          requires:
            - setup
          filters:
            tags:
              only: /.*/
      - security:
          requires:
            - setup
          filters:
            tags:
              only: /.*/
      - format:
          requires:
            - setup
          filters:
            tags:
              only: /.*/
      - lint:
          requires:
            - setup
          filters:
            tags:
              only: /.*/
      - coverage:
          filters:
            tags:
              only: /.*/
